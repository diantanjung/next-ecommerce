// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  email           String?          @unique
  password        String
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  shippingAddress ShippingAddress?
  cart            Cart?
  orders          Order[]
  paymentMethod   String?
  role            String           @default("user")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

type ShippingAddress {
  fullName      String
  streetAddress String
  city          String
  postalCode    String
  country       String
  lat           Float?
  lng           Float?
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  slug        String
  price       Float
  brand       String
  category    String
  stock       Int
  images      String[]
  isFeatured  Boolean
  banner      String
  rating      Float
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  OrderItem   OrderItem[]
}

model Cart {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  userId        String?     @unique @db.ObjectId
  user          User?       @relation(fields: [userId], references: [id])
  items         CartItem[]
  itemsPrice    String
  shippingPrice String
  taxPrice      String
  totalPrice    String
  sessionCartId String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

type CartItem {
  productId String
  name      String
  slug      String
  qty       Int
  image     String
  price     Float
}

model Order {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  userId     String      @db.ObjectId
  user       User        @relation(fields: [userId], references: [id])
  items      OrderItem[]
  totalPrice Float
  status     String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model OrderItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String  @db.ObjectId
  productId String  @db.ObjectId
  name      String
  price     Float
  quantity  Int
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}
